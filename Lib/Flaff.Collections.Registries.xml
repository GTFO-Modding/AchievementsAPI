<?xml version="1.0"?>
<doc>
    <assembly>
        <name>Flaff.Collections.Registries</name>
    </assembly>
    <members>
        <member name="T:Flaff.Collections.Registries.FailedToRegisterException">
            <summary>
            An exception thrown when an element fails to register.
            </summary>
        </member>
        <member name="P:Flaff.Collections.Registries.FailedToRegisterException.Registry">
            <summary>
            The associated registry
            </summary>
        </member>
        <member name="P:Flaff.Collections.Registries.FailedToRegisterException.Item">
            <summary>
            The item that failed to register.
            </summary>
        </member>
        <member name="M:Flaff.Collections.Registries.FailedToRegisterException.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
            <summary>
            Initializes a new instance of this exception with serialized data.
            </summary>
            <param name="info">The seralization info.</param>
            <param name="context">The serialization context.</param>
        </member>
        <member name="M:Flaff.Collections.Registries.FailedToRegisterException.#ctor">
            <summary>
            Initializes a new instance of this exception
            </summary>
        </member>
        <member name="M:Flaff.Collections.Registries.FailedToRegisterException.#ctor(Flaff.Collections.Registries.IRegistry)">
            <summary>
            Initializes a new instance of this exception
            </summary>
            <param name="registry">The register that the item was attempted to be registered to.</param>
        </member>
        <member name="M:Flaff.Collections.Registries.FailedToRegisterException.#ctor(Flaff.Collections.Registries.IRegisterable)">
            <summary>
            Initializes a new instance of this exception
            </summary>
            <param name="item">The item that was attempted to be registered</param>
        </member>
        <member name="M:Flaff.Collections.Registries.FailedToRegisterException.#ctor(Flaff.Collections.Registries.IRegistry,Flaff.Collections.Registries.IRegisterable)">
            <summary>
            Initializes a new instance of this exception
            </summary>
            <param name="registry">The register that the item was attempted to be registered to.</param>
            <param name="item">The item that was attempted to be registered</param>
        </member>
        <member name="M:Flaff.Collections.Registries.FailedToRegisterException.#ctor(System.String)">
            <summary>
            Initializes a new instance of this exception
            </summary>
            <param name="message">The message</param>
        </member>
        <member name="M:Flaff.Collections.Registries.FailedToRegisterException.#ctor(Flaff.Collections.Registries.IRegistry,System.String)">
            <summary>
            Initializes a new instance of this exception
            </summary>
            <param name="registry">The register that the item was attempted to be registered to.</param>
            <param name="message">The message</param>
        </member>
        <member name="M:Flaff.Collections.Registries.FailedToRegisterException.#ctor(Flaff.Collections.Registries.IRegisterable,System.String)">
            <summary>
            Initializes a new instance of this exception
            </summary>
            <param name="item">The item that was attempted to be registered</param>
            <param name="message">The message</param>
        </member>
        <member name="M:Flaff.Collections.Registries.FailedToRegisterException.#ctor(Flaff.Collections.Registries.IRegistry,Flaff.Collections.Registries.IRegisterable,System.String)">
            <summary>
            Initializes a new instance of this exception
            </summary>
            <param name="registry">The register that the item was attempted to be registered to.</param>
            <param name="item">The item that was attempted to be registered</param>
            <param name="message">The message</param>
        </member>
        <member name="M:Flaff.Collections.Registries.FailedToRegisterException.#ctor(System.String,System.Exception)">
            <summary>
            Initializes a new instance of this exception
            </summary>
            <param name="message">The message</param>
            <param name="innerException">The causing exception.</param>
        </member>
        <member name="M:Flaff.Collections.Registries.FailedToRegisterException.#ctor(Flaff.Collections.Registries.IRegisterable,System.String,System.Exception)">
            <summary>
            Initializes a new instance of this exception
            </summary>
            <param name="item">The item that was attempted to be registered</param>
            <param name="message">The message</param>
            <param name="innerException">The causing exception.</param>
        </member>
        <member name="M:Flaff.Collections.Registries.FailedToRegisterException.#ctor(Flaff.Collections.Registries.IRegistry,System.String,System.Exception)">
            <summary>
            Initializes a new instance of this exception
            </summary>
            <param name="registry">The register that the item was attempted to be registered to.</param>
            <param name="message">The message</param>
            <param name="innerException">The causing exception.</param>
        </member>
        <member name="M:Flaff.Collections.Registries.FailedToRegisterException.#ctor(Flaff.Collections.Registries.IRegistry,Flaff.Collections.Registries.IRegisterable,System.String,System.Exception)">
            <summary>
            Initializes a new instance of this exception
            </summary>
            <param name="registry">The register that the item was attempted to be registered to.</param>
            <param name="item">The item that was attempted to be registered</param>
            <param name="message">The message</param>
            <param name="innerException">The causing exception.</param>
        </member>
        <member name="T:Flaff.Collections.Registries.IRegisterable">
            <summary>
            Represents something that's registerable. This means that
            it has a unique identifier that can be used to get this specific item.
            </summary>
        </member>
        <member name="M:Flaff.Collections.Registries.IRegisterable.GetID">
            <summary>
            Returns the ID of this registerable item.
            </summary>
            <returns>The ID of this registerable item.</returns>
        </member>
        <member name="T:Flaff.Collections.Registries.IRegisterListener">
            <summary>
            An extension for <see cref="T:Flaff.Collections.Registries.IRegisterable"/> to allow for listening
            for when the item is registered.
            </summary>
        </member>
        <member name="M:Flaff.Collections.Registries.IRegisterListener.OnRegister">
            <summary>
            Called when this item is registered.
            </summary>
        </member>
        <member name="M:Flaff.Collections.Registries.IRegisterListener.OnRegisterFail(System.String)">
            <summary>
            Called when this item fails to register.
            </summary>
            <param name="failReason">The reason the registry failed.</param>
        </member>
        <member name="T:Flaff.Collections.Registries.IRegistry">
            <summary>
            Representation of a registry.
            </summary>
        </member>
        <member name="M:Flaff.Collections.Registries.IRegistry.ContainsEntry(System.String)">
            <summary>
            Returns whether or not this registry contains an entry with the given id.
            </summary>
            <param name="id">The given ID</param>
            <returns><see langword="false"/> if <paramref name="id"/> is null or
            this registry doesn't contain an entry with id <paramref name="id"/>, otherwise
            <see langword="true"/></returns>
        </member>
        <member name="M:Flaff.Collections.Registries.IRegistry.ContainsEntry(Flaff.Collections.Registries.IRegisterable)">
            <summary>
            Returns whether or not this registry contains an entry with the given entry.
            </summary>
            <param name="entry">The given entry</param>
            <returns><see langword="false"/> if <paramref name="entry"/> is null or
            this registry doesn't contain an entry that doesn't match
            <paramref name="entry"/>, otherwise <see langword="true"/></returns>
        </member>
        <member name="M:Flaff.Collections.Registries.IRegistry.GetEntries">
            <summary>
            Returns all entries in this registry.
            </summary>
            <returns>All entries in this registry.</returns>
        </member>
        <member name="M:Flaff.Collections.Registries.IRegistry.GetAllIDs">
            <summary>
            Returns all IDs of the entries in this registry.
            </summary>
            <returns>All IDs of the entries in this registry.</returns>
        </member>
        <member name="P:Flaff.Collections.Registries.IRegistry.Item(System.String)">
            <summary>
            Gets an entry inside this registry. Could throw
            an exception.
            </summary>
            <param name="id">The ID of the entry to get.</param>
            <returns>The fetched entry.</returns>
            <exception cref="T:System.ArgumentNullException">Thrown if <paramref name="id"/>
            is <see langword="null"/></exception>
            <exception cref="T:System.Collections.Generic.KeyNotFoundException">Thrown if no entry with id
            <paramref name="id"/> exists in this entry.</exception>
        </member>
        <member name="M:Flaff.Collections.Registries.IRegistry.TryGetEntry(System.String,Flaff.Collections.Registries.IRegisterable@)">
            <summary>
            Attempts to get an item in the registry with the given id <paramref name="id"/>.
            </summary>
            <param name="id">The ID of the entry to get.</param>
            <param name="entry">The entry gotten, or <see langword="default"/> if failed.</param>
            <returns><see langword="true"/> if getting the entry was successful, otherwise
            <see langword="false"/>.</returns>
        </member>
        <member name="M:Flaff.Collections.Registries.IRegistry.Register(Flaff.Collections.Registries.IRegisterable)">
            <summary>
            Registers the given entry in this registry.
            </summary>
            <param name="entry">The entry to register</param>
            <exception cref="T:System.ArgumentNullException">Thrown if <paramref name="entry"/>
            is <see langword="null"/></exception>
            <exception cref="T:Flaff.Collections.Registries.FailedToRegisterException">Thrown if an error occurs
            whilst registering <paramref name="entry"/></exception>
        </member>
        <member name="M:Flaff.Collections.Registries.IRegistry.UnRegister(System.String)">
            <summary>
            Unregisters the entry with the id <paramref name="id"/> from the
            registry.
            </summary>
            <param name="id">The ID of the entry to unregister.</param>
            <returns><see langword="true"/> if an entry with ID <paramref name="id"/>
            was successfully unregistered and removed from this registry, otherwise
            returns <see langword="false"/> if there was no entry with id <paramref name="id"/>
            in the registry to begin with.</returns>
        </member>
        <member name="M:Flaff.Collections.Registries.IRegistry.UnRegister(Flaff.Collections.Registries.IRegisterable)">
            <summary>
            Attempts to unregister <paramref name="entry"/> from this registry.
            </summary>
            <param name="entry">The entry to unregister.</param>
            <returns><see langword="true"/> if <paramref name="entry"/> was successfully
            unregistered and removed from this registry, otherwise returns
            <see langword="false"/> if <paramref name="entry"/> wasn't in the registry
            to begin with.</returns>
            <exception cref="T:System.ArgumentNullException">Thrown if <paramref name="entry"/>
            is <see langword="null"/></exception>
        </member>
        <member name="M:Flaff.Collections.Registries.IRegistry.UnRegisterAll">
            <summary>
            Unregisters all entries in this registry. Pretty much clears this registry.
            <para>
            This method will throw exceptions after all entries are unregistered, so you can
            ensure that this registry will be empty. If one exception occurred, it will rethrow it,
            otherwise it will throw an <see cref="T:System.AggregateException"/>.
            </para>
            </summary>
            <exception cref="T:System.Exception">Thrown for an individual unregister error</exception>
            <exception cref="T:System.AggregateException">Thrown for multiple unregister errors</exception>
        </member>
        <member name="T:Flaff.Collections.Registries.IRegistry`1">
            <summary>
            Representation of a registry of specific elements.
            </summary>
            <typeparam name="T">The element this registry contains.</typeparam>
        </member>
        <member name="M:Flaff.Collections.Registries.IRegistry`1.ContainsEntry(`0)">
            <summary>
            Returns whether or not this registry contains an entry with the given entry.
            </summary>
            <param name="entry">The given entry</param>
            <returns><see langword="false"/> if <paramref name="entry"/> is null or
            this registry doesn't contain an entry that doesn't match
            <paramref name="entry"/>, otherwise <see langword="true"/></returns>
        </member>
        <member name="M:Flaff.Collections.Registries.IRegistry`1.UnRegister(`0)">
            <summary>
            Attempts to unregister <paramref name="entry"/> from this registry.
            </summary>
            <param name="entry">The entry to unregister.</param>
            <returns><see langword="true"/> if <paramref name="entry"/> was successfully
            unregistered and removed from this registry, otherwise returns
            <see langword="false"/> if <paramref name="entry"/> wasn't in the registry
            to begin with.</returns>
            <exception cref="T:System.ArgumentNullException">Thrown if <paramref name="entry"/>
            is <see langword="null"/></exception>
        </member>
        <member name="M:Flaff.Collections.Registries.IRegistry`1.GetEntries">
            <summary>
            Returns all entries in this registry.
            </summary>
            <returns>All entries in this registry.</returns>
        </member>
        <member name="M:Flaff.Collections.Registries.IRegistry`1.Register(`0)">
            <summary>
            Registers the given entry in this registry.
            </summary>
            <param name="entry">The entry to register</param>
            <exception cref="T:System.ArgumentNullException">Thrown if <paramref name="entry"/>
            is <see langword="null"/></exception>
            <exception cref="T:Flaff.Collections.Registries.FailedToRegisterException">Thrown if an error occurs
            whilst registering <paramref name="entry"/></exception>
        </member>
        <member name="M:Flaff.Collections.Registries.IRegistry`1.TryGetEntry(System.String,`0@)">
            <summary>
            Attempts to get an item in the registry with the given id <paramref name="id"/>.
            </summary>
            <param name="id">The ID of the entry to get.</param>
            <param name="entry">The entry gotten, or <see langword="default"/> if failed.</param>
            <returns><see langword="true"/> if getting the entry was successful, otherwise
            <see langword="false"/>.</returns>
        </member>
        <member name="P:Flaff.Collections.Registries.IRegistry`1.Item(System.String)">
            <summary>
            Gets an item in this registry with the specified ID.
            </summary>
            <param name="id">The ID of the item to get.</param>
            <returns>The found item.</returns>
            <exception cref="T:System.Collections.Generic.KeyNotFoundException">Thrown if no such entry
            with id <paramref name="id"/> exists</exception>
            <exception cref="T:System.ArgumentNullException">Thrown if <paramref name="id"/>
            is <see langword="null"/></exception>
        </member>
        <member name="T:Flaff.Collections.Registries.IRegistryList`1">
            <summary>
            A list of registerable items.
            </summary>
            <typeparam name="TElement">The elements this list holds.</typeparam>
        </member>
        <member name="P:Flaff.Collections.Registries.IRegistryList`1.Item(System.String)">
            <summary>
            Get or set values inside this list.
            </summary>
            <param name="id">The ID of the element.</param>
            <returns>The element at that ID</returns>
            <exception cref="T:System.Collections.Generic.KeyNotFoundException">Thrown if no such element
            with id <paramref name="id"/> exists</exception>
            <exception cref="T:System.ArgumentNullException">Thrown if <paramref name="id"/>
            is <see langword="null"/></exception>
        </member>
        <member name="T:Flaff.Collections.Registries.IRegistryListExtensions">
            <summary>
            Extensions for registry lists.
            </summary>
        </member>
        <member name="M:Flaff.Collections.Registries.IRegistryListExtensions.ContainsID``1(Flaff.Collections.Registries.IRegistryList{``0},System.String)">
            <summary>
            Returns whether or not the registry list contains
            an element with id <paramref name="id"/>.
            </summary>
            <typeparam name="T">The type of elements the list holds.</typeparam>
            <param name="list">The list instance.</param>
            <param name="id">The ID of the element to search for.</param>
            <returns><see langword="true"/> if an element with id <paramref name="id"/>
            was found, otherwise <see langword="false"/>.</returns>
            <exception cref="T:System.ArgumentNullException">Thrown if <paramref name="id"/>
            is <see langword="null"/></exception>
        </member>
        <member name="M:Flaff.Collections.Registries.IRegistryListExtensions.IndexOfID``1(Flaff.Collections.Registries.IRegistryList{``0},System.String)">
            <summary>
            Returns the first index of an element with id <paramref name="id"/>.
            </summary>
            <typeparam name="T">The type of elements the list holds.</typeparam>
            <param name="list">The list instance.</param>
            <param name="id">The ID of the element to find.</param>
            <returns>The index of the first found element with id <paramref name="id"/>,
            but if no element was found returns -1.</returns>
            <exception cref="T:System.ArgumentNullException">Thrown if <paramref name="id"/>
            is <see langword="null"/></exception>
        </member>
        <member name="M:Flaff.Collections.Registries.IRegistryListExtensions.RemoveID``1(Flaff.Collections.Registries.IRegistryList{``0},System.String)">
            <summary>
            Attempts to remove an element with the specified id.
            </summary>
            <typeparam name="T">The type of elements the list holds.</typeparam>
            <param name="list">The list instance.</param>
            <param name="id">The ID of the element to remove.</param>
            <returns><see langword="true"/> if an element with id <paramref name="id"/>
            was found and removed, otherwise <see langword="false"/>.</returns>
            <exception cref="T:System.ArgumentNullException">Thrown if <paramref name="id"/>
            is <see langword="null"/></exception>
        </member>
        <member name="M:Flaff.Collections.Registries.IRegistryListExtensions.TryGetValue``1(Flaff.Collections.Registries.IRegistryList{``0},System.String,``0@)">
            <summary>
            Tries to get an element in the list with the specified ID, returning
            whether or not it was successful.
            </summary>
            <typeparam name="T">The type of elements the list holds.</typeparam>
            <param name="list">The list instance.</param>
            <param name="id">The ID of the element to fetch.</param>
            <param name="value">The found value, or <see langword="null"/>.</param>
            <returns><see langword="true"/> if an element with id <paramref name="id"/>
            was found, otherwise <see langword="false"/>.</returns>
        </member>
        <member name="M:Flaff.Collections.Registries.IRegistryListExtensions.GetIDS``1(Flaff.Collections.Registries.IRegistryList{``0})">
            <summary>
            Returns a string array of all unique IDS this registry list has.
            </summary>
            <typeparam name="T">The type of elements the list holds.</typeparam>
            <param name="list">The list instance.</param>
            <returns>a string array of all unique IDS this registry list has.</returns>
        </member>
        <member name="M:Flaff.Collections.Registries.IRegistryListExtensions.GetValues``1(Flaff.Collections.Registries.IRegistryList{``0},System.String)">
            <summary>
            Returns all values associated with the specified id.
            </summary>
            <typeparam name="T">The type of elements the list holds.</typeparam>
            <param name="list">The list instance.</param>
            <param name="id">The ID.</param>
            <returns>all values associated with the specified id.</returns>
        </member>
        <member name="T:Flaff.Collections.Registries.IUnregisterListener">
            <summary>
            An extension for <see cref="T:Flaff.Collections.Registries.IRegisterable"/> to allow for listening
            for when the item is registered.
            </summary>
        </member>
        <member name="M:Flaff.Collections.Registries.IUnregisterListener.OnUnregister">
            <summary>
            Called when this item is unregistered
            </summary>
        </member>
        <member name="T:Flaff.Collections.Registries.JsonConverters.RegistryListConverterBase`2">
            <summary>
            An abstract JSON Converter that handles Registry Lists.
            </summary>
            <typeparam name="TList">The List</typeparam>
            <typeparam name="TElement">The elements in the list</typeparam>
        </member>
        <member name="P:Flaff.Collections.Registries.JsonConverters.RegistryListConverterBase`2.WriteMode">
            <summary>
            The write mode of this converter.
            </summary>
        </member>
        <member name="M:Flaff.Collections.Registries.JsonConverters.RegistryListConverterBase`2.Read(System.Text.Json.Utf8JsonReader@,System.Type,System.Text.Json.JsonSerializerOptions)">
            <inheritdoc/>
        </member>
        <member name="M:Flaff.Collections.Registries.JsonConverters.RegistryListConverterBase`2.CreateElementFromID(System.String)">
            <summary>
            Create an element with the specific ID.
            </summary>
            <param name="id">The ID of the element to create.</param>
            <returns>The created element.</returns>
        </member>
        <member name="M:Flaff.Collections.Registries.JsonConverters.RegistryListConverterBase`2.FillElement(`1,System.Text.Json.Utf8JsonReader@,System.Text.Json.JsonSerializerOptions)">
            <summary>
            Fills the <paramref name="element"/> with values from the <paramref name="reader"/>.
            </summary>
            <param name="element">The element to fill.</param>
            <param name="reader">The JSON reader</param>
            <param name="options">The Json Serializer options.</param>
        </member>
        <member name="M:Flaff.Collections.Registries.JsonConverters.RegistryListConverterBase`2.Write(System.Text.Json.Utf8JsonWriter,`0,System.Text.Json.JsonSerializerOptions)">
            <inheritdoc/>
        </member>
        <member name="M:Flaff.Collections.Registries.JsonConverters.RegistryListConverterBase`2.WriteElementProperties(System.Text.Json.Utf8JsonWriter,`1,System.Text.Json.JsonSerializerOptions)">
            <summary>
            Write the elements properties to the <paramref name="writer"/>. Don't worry about
            writing <see cref="F:System.Text.Json.JsonTokenType.StartObject"/> and <see cref="F:System.Text.Json.JsonTokenType.EndObject"/>,
            as that's already handled for you.
            </summary>
            <param name="writer">The writer.</param>
            <param name="element">The element to write.</param>
            <param name="options">The options.</param>
        </member>
        <member name="T:Flaff.Collections.Registries.JsonConverters.RegistryListWriteMode">
            <summary>
            The write mode of an internal registry list.
            </summary>
        </member>
        <member name="F:Flaff.Collections.Registries.JsonConverters.RegistryListWriteMode.List">
            <summary>
            Write as a list
            </summary>
        </member>
        <member name="F:Flaff.Collections.Registries.JsonConverters.RegistryListWriteMode.Map">
            <summary>
            Write as a map or object
            </summary>
        </member>
        <member name="T:Flaff.Collections.Registries.Registry`1">
            <summary>
            A registry implementation using a dictionary.
            </summary>
            <typeparam name="T">The type of element this registry stores</typeparam>
        </member>
        <member name="M:Flaff.Collections.Registries.Registry`1.#ctor">
            <summary>
            Initializes this registry.
            </summary>
        </member>
        <member name="P:Flaff.Collections.Registries.Registry`1.Count">
            <inheritdoc/>
        </member>
        <member name="M:Flaff.Collections.Registries.Registry`1.GetEntries">
            <inheritdoc/>
        </member>
        <member name="M:Flaff.Collections.Registries.Registry`1.GetAllIDs">
            <inheritdoc/>
        </member>
        <member name="M:Flaff.Collections.Registries.Registry`1.TryGetEntry(System.String,`0@)">
            <inheritdoc/>
        </member>
        <member name="M:Flaff.Collections.Registries.Registry`1.AddEntry(`0)">
            <inheritdoc/>
        </member>
        <member name="M:Flaff.Collections.Registries.Registry`1.RemoveEntry(System.String)">
            <inheritdoc/>
        </member>
        <member name="M:Flaff.Collections.Registries.Registry`1.ContainsEntryWithID(System.String)">
            <inheritdoc/>
        </member>
        <member name="T:Flaff.Collections.Registries.RegistryBase`1">
            <summary>
            A base registry implementation.
            <para>
            Doesn't handle the storage of actual data, so thats
            the job of implementing classes.
            </para>
            </summary>
            <typeparam name="T">The type of element this registry contains.</typeparam>
        </member>
        <member name="P:Flaff.Collections.Registries.RegistryBase`1.DebugName">
            <summary>
            The Debug Name of this registry. Used for logging.
            </summary>
        </member>
        <member name="P:Flaff.Collections.Registries.RegistryBase`1.Count">
            <inheritdoc/>
        </member>
        <member name="P:Flaff.Collections.Registries.RegistryBase`1.IsReadOnly">
            <inheritdoc/>
        </member>
        <member name="M:Flaff.Collections.Registries.RegistryBase`1.GetEntries">
            <inheritdoc/>
        </member>
        <member name="M:Flaff.Collections.Registries.RegistryBase`1.GetAllIDs">
            <inheritdoc/>
        </member>
        <member name="M:Flaff.Collections.Registries.RegistryBase`1.#ctor">
            <summary>
            Initializies this registry.
            </summary>
        </member>
        <member name="M:Flaff.Collections.Registries.RegistryBase`1.CanRegister(`0,System.String@)">
            <summary>
            Returns whether or not an entry can be registered, outputting a reason if not.
            <para>
            Base implementation checks if the registry is read only,
            if the entry's ID is null,
            and if this registry already contains an entry with the entry's ID.
            </para>
            </summary>
            <param name="entry">The entry to check.</param>
            <param name="failReason">The reason why the entry can't be registered
            or <see langword="null"/></param>
            <returns><see langword="true"/> if the entry can be registered,
            otherwise <see langword="false"/></returns>
        </member>
        <member name="M:Flaff.Collections.Registries.RegistryBase`1.OnRegistered(`0)">
            <summary>
            Called when an entry is registered.
            </summary>
            <param name="entry">The entry registered.</param>
        </member>
        <member name="M:Flaff.Collections.Registries.RegistryBase`1.OnUnRegistered(`0)">
            <summary>
            Called when an entry is unregistered.
            </summary>
            <param name="entry">The entry unregistered.</param>
        </member>
        <member name="M:Flaff.Collections.Registries.RegistryBase`1.OnRegisterFailed(`0,System.String)">
            <summary>
            Called when an entry fails to registered.
            </summary>
            <param name="entry">The entry that failed to register.</param>
            <param name="failReason">The reason why it failed to register.</param>
        </member>
        <member name="M:Flaff.Collections.Registries.RegistryBase`1.TryGetEntry(System.String,`0@)">
            <inheritdoc/>
        </member>
        <member name="M:Flaff.Collections.Registries.RegistryBase`1.ContainsEntryWithID(System.String)">
            <summary>
            Return whether or not this registry has an entry with the specified ID.
            </summary>
            <param name="id">The ID of the entry to check for.</param>
            <returns><see langword="true"/> if it exists, otherwise
            <see langword="false"/></returns>
        </member>
        <member name="M:Flaff.Collections.Registries.RegistryBase`1.AddEntry(`0)">
            <summary>
            Adds an entry to the registry. No checks should be done here,
            as they are handled on methods that call this.
            </summary>
            <param name="entry">The entry to add.</param>
        </member>
        <member name="M:Flaff.Collections.Registries.RegistryBase`1.RemoveEntry(`0)">
            <summary>
            Removes an entry to the registry. No checks should be done here,
            as they are handled on methods that call this.
            </summary>
            <param name="entry">The entry to remove.</param>
        </member>
        <member name="M:Flaff.Collections.Registries.RegistryBase`1.RemoveEntry(System.String)">
            <summary>
            Removes an entry to the registry. No checks should be done here,
            as they are handled on methods that call this.
            </summary>
            <param name="id">The ID of the entry to remove.</param>
        </member>
        <member name="M:Flaff.Collections.Registries.RegistryBase`1.Register(`0)">
            <inheritdoc/>
        </member>
        <member name="M:Flaff.Collections.Registries.RegistryBase`1.UnRegister(`0)">
            <inheritdoc/>
        </member>
        <member name="M:Flaff.Collections.Registries.RegistryBase`1.UnRegister(System.String)">
            <inheritdoc/>
        </member>
        <member name="M:Flaff.Collections.Registries.RegistryBase`1.UnRegisterAll">
            <inheritdoc/>
        </member>
        <member name="M:Flaff.Collections.Registries.RegistryBase`1.ContainsEntry(System.String)">
            <inheritdoc/>
        </member>
        <member name="M:Flaff.Collections.Registries.RegistryBase`1.ContainsEntry(`0)">
            <inheritdoc/>
        </member>
        <member name="M:Flaff.Collections.Registries.RegistryBase`1.CopyTo(`0[],System.Int32)">
            <inheritdoc/>
        </member>
        <member name="P:Flaff.Collections.Registries.RegistryBase`1.Item(System.String)">
            <inheritdoc/>
        </member>
        <member name="M:Flaff.Collections.Registries.RegistryBase`1.GetEnumerator">
            <inheritdoc/>
        </member>
        <member name="T:Flaff.Collections.Registries.RegistryElementFactorySettings">
            <summary>
            Descriptor for creating a registry element.
            </summary>
        </member>
        <member name="P:Flaff.Collections.Registries.RegistryElementFactorySettings.Type">
            <summary>
            The type of the element.
            </summary>
        </member>
        <member name="P:Flaff.Collections.Registries.RegistryElementFactorySettings.ID">
            <summary>
            The ID of the element.
            </summary>
        </member>
        <member name="M:Flaff.Collections.Registries.RegistryElementFactorySettings.#ctor(System.Type,System.String)">
            <summary>
            Initializes this descriptor.
            </summary>
            <param name="type">The type this descriptor creates.</param>
            <param name="id">The ID of the element.</param>
            <exception cref="T:System.ArgumentNullException"><paramref name="id"/>
            or <paramref name="type"/> is <see langword="null"/>.</exception>
        </member>
        <member name="M:Flaff.Collections.Registries.RegistryElementFactorySettings.CreateInstance">
            <summary>
            Creates a new instance of the element this descriptor references.
            </summary>
            <returns>A new instance of the element this descriptor references.</returns>
            <exception cref="T:System.InvalidOperationException">If an instance failed to create.</exception>
        </member>
        <member name="T:Flaff.Collections.Registries.RegistryElementFactorySettings`1">
            <summary>
            Descriptor for creating a registry element.
            </summary>
            <typeparam name="TElement"></typeparam>
        </member>
        <member name="M:Flaff.Collections.Registries.RegistryElementFactorySettings`1.#ctor(`0)">
            <summary>
            Initializes this descriptor.
            </summary>
            <param name="element">The element this descriptor is for.</param>
        </member>
        <member name="M:Flaff.Collections.Registries.RegistryElementFactorySettings`1.CreateInstance">
            <summary>
            Creates a new instance of the element this descriptor references.
            </summary>
            <returns>A new instance of the element this descriptor references.</returns>
            <exception cref="T:System.InvalidOperationException">If an instance failed to create.</exception>
        </member>
        <member name="T:Flaff.Collections.Registries.RegistryList`1">
            <summary>
            An implementation of a registry list.
            </summary>
            <typeparam name="TElement">The elements this list holds.</typeparam>
        </member>
        <member name="M:Flaff.Collections.Registries.RegistryList`1.#ctor">
            <summary>
            Initializes this list.
            </summary>
        </member>
        <member name="P:Flaff.Collections.Registries.RegistryList`1.Item(System.Int32)">
            <inheritdoc/>
        </member>
        <member name="P:Flaff.Collections.Registries.RegistryList`1.Count">
            <inheritdoc/>
        </member>
        <member name="P:Flaff.Collections.Registries.RegistryList`1.IsReadOnly">
            <inheritdoc/>
        </member>
        <member name="M:Flaff.Collections.Registries.RegistryList`1.Add(`0)">
            <inheritdoc/>
        </member>
        <member name="M:Flaff.Collections.Registries.RegistryList`1.Clear">
            <inheritdoc/>
        </member>
        <member name="M:Flaff.Collections.Registries.RegistryList`1.Contains(`0)">
            <inheritdoc/>
        </member>
        <member name="M:Flaff.Collections.Registries.RegistryList`1.CopyTo(`0[],System.Int32)">
            <inheritdoc/>
        </member>
        <member name="M:Flaff.Collections.Registries.RegistryList`1.GetEnumerator">
            <inheritdoc/>
        </member>
        <member name="M:Flaff.Collections.Registries.RegistryList`1.IndexOf(`0)">
            <inheritdoc/>
        </member>
        <member name="M:Flaff.Collections.Registries.RegistryList`1.Insert(System.Int32,`0)">
            <inheritdoc/>
        </member>
        <member name="M:Flaff.Collections.Registries.RegistryList`1.Remove(`0)">
            <inheritdoc/>
        </member>
        <member name="M:Flaff.Collections.Registries.RegistryList`1.RemoveAt(System.Int32)">
            <inheritdoc/>
        </member>
        <member name="P:Flaff.Collections.Registries.RegistryList`1.Item(System.String)">
            <inheritdoc/>
        </member>
        <member name="T:Flaff.Collections.Registries.RegistryOfFactory`2">
            <summary>
            Implementation of a Registry of Descriptors that can be used to
            instantiate a new element.
            </summary>
            <typeparam name="TElement">The element each descriptor creates</typeparam>
            <typeparam name="TElementFactoryInfo">The type of the descriptor</typeparam>
        </member>
        <member name="M:Flaff.Collections.Registries.RegistryOfFactory`2.#ctor">
            <summary>
            Initializes this registry.
            </summary>
        </member>
        <member name="M:Flaff.Collections.Registries.RegistryOfFactory`2.CreateFactoryInfo(`0)">
            <summary>
            Create a new Descriptor based on the element provided.
            </summary>
            <param name="element">The element</param>
            <returns>A descriptor of that element.</returns>
        </member>
        <member name="M:Flaff.Collections.Registries.RegistryOfFactory`2.Register``1">
            <summary>
            Register an element in this registry factory.
            </summary>
            <typeparam name="T">The type of the element.</typeparam>
        </member>
        <member name="M:Flaff.Collections.Registries.RegistryOfFactory`2.Register(`0)">
            <summary>
            Register an element in this registry factory.
            </summary>
            <exception cref="T:System.ArgumentNullException">When <paramref name="element"/>
            is <see langword="null"/></exception>
        </member>
        <member name="M:Flaff.Collections.Registries.RegistryOfFactory`2.UnRegister(`0)">
            <summary>
            Unregister an element in this registry factory
            </summary>
            <exception cref="T:System.ArgumentNullException">When <paramref name="element"/>
            is <see langword="null"/></exception>
        </member>
        <member name="M:Flaff.Collections.Registries.RegistryOfFactory`2.CreateElement(System.String)">
            <summary>
            Create a new element using the descriptor with id
            <paramref name="id"/>.
            </summary>
            <param name="id">The ID of the descriptor</param>
            <returns>The created element.</returns>
            <exception cref="T:System.ArgumentNullException"><paramref name="id"/>
            is <see langword="null"/></exception>
            <exception cref="T:System.Collections.Generic.KeyNotFoundException">
            No such element with id <paramref name="id"/> exists.</exception>
        </member>
        <member name="M:Flaff.Collections.Registries.RegistryOfFactory`2.TryCreateElement(System.String,`0@)">
            <summary>
            Attempts to create an element, returning false if failed.
            </summary>
            <param name="id">The ID of the descriptor</param>
            <param name="element">The created element, or <see langword="default"/>
            if it failed to create.</param>
            <returns><see langword="true"/> if the element was created successfully,
            otherwise <see langword="false"/>.</returns>
        </member>
        <member name="T:Flaff.Collections.Registries.RegistryOfFactory`1">
            <summary>
            Implementation of a Registry of Descriptors that can be used to
            instantiate a new element.
            <para>
            Uses the default descriptor <see cref="T:Flaff.Collections.Registries.RegistryElementFactorySettings`1"/>.
            </para>
            </summary>
            <typeparam name="TElement">The element each descriptor creates</typeparam>
        </member>
        <member name="M:Flaff.Collections.Registries.RegistryOfFactory`1.#ctor">
            <summary>
            Initializes this registry.
            </summary>
        </member>
        <member name="M:Flaff.Collections.Registries.RegistryOfFactory`1.CreateFactoryInfo(`0)">
            <inheritdoc/>
        </member>
    </members>
</doc>
